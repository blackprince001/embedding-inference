// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TextEmbeddingsService_Embed_FullMethodName               = "/textembedding.TextEmbeddingsService/Embed"
	TextEmbeddingsService_EmbedAll_FullMethodName            = "/textembedding.TextEmbeddingsService/EmbedAll"
	TextEmbeddingsService_EmbedSparse_FullMethodName         = "/textembedding.TextEmbeddingsService/EmbedSparse"
	TextEmbeddingsService_CalculateSimilarity_FullMethodName = "/textembedding.TextEmbeddingsService/CalculateSimilarity"
)

// TextEmbeddingsServiceClient is the client API for TextEmbeddingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextEmbeddingsServiceClient interface {
	Embed(ctx context.Context, in *EmbedRequest, opts ...grpc.CallOption) (*EmbedResponse, error)
	EmbedAll(ctx context.Context, in *EmbedAllRequest, opts ...grpc.CallOption) (*EmbedAllResponse, error)
	EmbedSparse(ctx context.Context, in *EmbedSparseRequest, opts ...grpc.CallOption) (*EmbedSparseResponse, error)
	CalculateSimilarity(ctx context.Context, in *SimilarityRequest, opts ...grpc.CallOption) (*SimilarityResponse, error)
}

type textEmbeddingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextEmbeddingsServiceClient(cc grpc.ClientConnInterface) TextEmbeddingsServiceClient {
	return &textEmbeddingsServiceClient{cc}
}

func (c *textEmbeddingsServiceClient) Embed(ctx context.Context, in *EmbedRequest, opts ...grpc.CallOption) (*EmbedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmbedResponse)
	err := c.cc.Invoke(ctx, TextEmbeddingsService_Embed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textEmbeddingsServiceClient) EmbedAll(ctx context.Context, in *EmbedAllRequest, opts ...grpc.CallOption) (*EmbedAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmbedAllResponse)
	err := c.cc.Invoke(ctx, TextEmbeddingsService_EmbedAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textEmbeddingsServiceClient) EmbedSparse(ctx context.Context, in *EmbedSparseRequest, opts ...grpc.CallOption) (*EmbedSparseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmbedSparseResponse)
	err := c.cc.Invoke(ctx, TextEmbeddingsService_EmbedSparse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textEmbeddingsServiceClient) CalculateSimilarity(ctx context.Context, in *SimilarityRequest, opts ...grpc.CallOption) (*SimilarityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimilarityResponse)
	err := c.cc.Invoke(ctx, TextEmbeddingsService_CalculateSimilarity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextEmbeddingsServiceServer is the server API for TextEmbeddingsService service.
// All implementations must embed UnimplementedTextEmbeddingsServiceServer
// for forward compatibility.
type TextEmbeddingsServiceServer interface {
	Embed(context.Context, *EmbedRequest) (*EmbedResponse, error)
	EmbedAll(context.Context, *EmbedAllRequest) (*EmbedAllResponse, error)
	EmbedSparse(context.Context, *EmbedSparseRequest) (*EmbedSparseResponse, error)
	CalculateSimilarity(context.Context, *SimilarityRequest) (*SimilarityResponse, error)
	mustEmbedUnimplementedTextEmbeddingsServiceServer()
}

// UnimplementedTextEmbeddingsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTextEmbeddingsServiceServer struct{}

func (UnimplementedTextEmbeddingsServiceServer) Embed(context.Context, *EmbedRequest) (*EmbedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Embed not implemented")
}
func (UnimplementedTextEmbeddingsServiceServer) EmbedAll(context.Context, *EmbedAllRequest) (*EmbedAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedAll not implemented")
}
func (UnimplementedTextEmbeddingsServiceServer) EmbedSparse(context.Context, *EmbedSparseRequest) (*EmbedSparseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedSparse not implemented")
}
func (UnimplementedTextEmbeddingsServiceServer) CalculateSimilarity(context.Context, *SimilarityRequest) (*SimilarityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateSimilarity not implemented")
}
func (UnimplementedTextEmbeddingsServiceServer) mustEmbedUnimplementedTextEmbeddingsServiceServer() {}
func (UnimplementedTextEmbeddingsServiceServer) testEmbeddedByValue()                               {}

// UnsafeTextEmbeddingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextEmbeddingsServiceServer will
// result in compilation errors.
type UnsafeTextEmbeddingsServiceServer interface {
	mustEmbedUnimplementedTextEmbeddingsServiceServer()
}

func RegisterTextEmbeddingsServiceServer(s grpc.ServiceRegistrar, srv TextEmbeddingsServiceServer) {
	// If the following call pancis, it indicates UnimplementedTextEmbeddingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TextEmbeddingsService_ServiceDesc, srv)
}

func _TextEmbeddingsService_Embed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextEmbeddingsServiceServer).Embed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextEmbeddingsService_Embed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextEmbeddingsServiceServer).Embed(ctx, req.(*EmbedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextEmbeddingsService_EmbedAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextEmbeddingsServiceServer).EmbedAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextEmbeddingsService_EmbedAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextEmbeddingsServiceServer).EmbedAll(ctx, req.(*EmbedAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextEmbeddingsService_EmbedSparse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedSparseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextEmbeddingsServiceServer).EmbedSparse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextEmbeddingsService_EmbedSparse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextEmbeddingsServiceServer).EmbedSparse(ctx, req.(*EmbedSparseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextEmbeddingsService_CalculateSimilarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimilarityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextEmbeddingsServiceServer).CalculateSimilarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextEmbeddingsService_CalculateSimilarity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextEmbeddingsServiceServer).CalculateSimilarity(ctx, req.(*SimilarityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextEmbeddingsService_ServiceDesc is the grpc.ServiceDesc for TextEmbeddingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextEmbeddingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "textembedding.TextEmbeddingsService",
	HandlerType: (*TextEmbeddingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Embed",
			Handler:    _TextEmbeddingsService_Embed_Handler,
		},
		{
			MethodName: "EmbedAll",
			Handler:    _TextEmbeddingsService_EmbedAll_Handler,
		},
		{
			MethodName: "EmbedSparse",
			Handler:    _TextEmbeddingsService_EmbedSparse_Handler,
		},
		{
			MethodName: "CalculateSimilarity",
			Handler:    _TextEmbeddingsService_CalculateSimilarity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/service.proto",
}
